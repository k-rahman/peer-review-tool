// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Task.Service.API.Db;

namespace Task.Service.API.Migrations
{
    [DbContext(typeof(TaskContext))]
    partial class TaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Task.Service.API.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("Publish")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ReviewEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ReviewStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SubmissionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SubmissionStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "first task description",
                            InstructorId = 1,
                            Link = "first task link",
                            Name = "first task",
                            Publish = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 508, DateTimeKind.Unspecified).AddTicks(8101), new TimeSpan(0, 3, 0, 0, 0)),
                            ReviewEnd = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(3679), new TimeSpan(0, 3, 0, 0, 0)),
                            ReviewStart = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(3677), new TimeSpan(0, 3, 0, 0, 0)),
                            SubmissionEnd = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(3674), new TimeSpan(0, 3, 0, 0, 0)),
                            SubmissionStart = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(3660), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            Description = "second task description",
                            InstructorId = 1,
                            Link = "second task link",
                            Name = "second task",
                            Publish = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(4523), new TimeSpan(0, 3, 0, 0, 0)),
                            ReviewEnd = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(4537), new TimeSpan(0, 3, 0, 0, 0)),
                            ReviewStart = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(4536), new TimeSpan(0, 3, 0, 0, 0)),
                            SubmissionEnd = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(4534), new TimeSpan(0, 3, 0, 0, 0)),
                            SubmissionStart = new DateTimeOffset(new DateTime(2021, 5, 14, 1, 12, 43, 511, DateTimeKind.Unspecified).AddTicks(4532), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
